{
    "sourceFile": "src/components/EditProject.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1695204962786,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1695204998612,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,11 @@\n-rafce\n\\ No newline at end of file\n+import React from 'react';\r\n+\r\n+type EditProjectProps = {\r\n+    \r\n+};\r\n+\r\n+const EditProject:React.FC<EditProjectProps> = () => {\r\n+    \r\n+    return <div>Have a good coding</div>\r\n+}\r\n+export default EditProject;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1695205612788,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,11 +1,247 @@\n-import React from 'react';\r\n+import { adminUserState } from '@/atoms/AdminUser'\r\n+import { auth,db, storage } from '@/firebase/firebase'\r\n+import { Flex,Text,Image,Input,Textarea,Button,Stack,Icon } from '@chakra-ui/react'\r\n+import React,{useEffect,useState,useRef} from 'react'\r\n+import { useAuthState } from 'react-firebase-hooks/auth'\r\n+import{MdOutlineCancel}from \"react-icons/md\"\r\n+import { useRecoilState } from 'recoil'\r\n+import { getDoc,doc ,updateDoc, arrayUnion, deleteField} from 'firebase/firestore';\r\n+import { collection, addDoc,Timestamp } from \"firebase/firestore\";\r\n+import {toast} from \"react-toastify\" \r\n\\ No newline at end of file\n+import { useRouter } from 'next/router'\r\n+import 'react-quill/dist/quill.snow.css';\r\n+import dynamic from \"next/dynamic\";\r\n+import { deleteObject, getDownloadURL, ref, uploadString } from 'firebase/storage'\r\n+import { props,Projects } from '@/atoms/Project'\r\n \r\n-type EditProjectProps = {\r\n-    \r\n-};\r\n \r\n-const EditProject:React.FC<EditProjectProps> = () => {\r\n+const ReactQuill = dynamic(import('react-quill'), { ssr: false })\r\n+const EditorModule = {\r\n+toolbar: [\r\n+  ['bold', 'italic', 'underline', 'strike'],        // toggled buttons\r\n+  ['blockquote', 'code-block'],\r\n+\r\n+  [{ 'header': 1 }, { 'header': 2 }],               // custom button values\r\n+  [{ 'list': 'ordered'}, { 'list': 'bullet' }],\r\n+  [{ 'script': 'sub'}, { 'script': 'super' }],      // superscript/subscript\r\n+  [{ 'indent': '-1'}, { 'indent': '+1' }], \r\n+  ['link', 'video'],         // outdent/indent\r\n+  [{ 'direction': 'rtl' }],                         // text direction\r\n+\r\n+  [{ 'size': ['small', false, 'large', 'huge'] }],  // custom dropdown\r\n+  [{ 'header': [1, 2, 3, 4, 5, 6, false] }],\r\n+\r\n+  [{ 'color': [] }, { 'background': [] }],          // dropdown with defaults from theme\r\n+  [{ 'font': [] }],\r\n+  [{ 'align': [] }],\r\n+\r\n+  ['clean']                                         // remove formatting button\r\n+],\r\n+  clipboard: {\r\n+    // toggle to add extra line breaks when pasting HTML:\r\n+    matchVisual: false,\r\n+  }\r\n+}\r\n+\r\n+const formats = [\r\n+  'header', 'font', 'size',\r\n+  'bold', 'italic', 'underline', 'strike', 'blockquote',\r\n+  'list', 'bullet', 'indent',\r\n+  'link', 'image', 'video'\r\n+]\r\n+\r\n+var toolbarOptions = [\r\n+  ['bold', 'italic', 'underline', 'strike'],        // toggled buttons\r\n+  ['blockquote', 'code-block'],\r\n+\r\n+  [{ 'header': 1 }, { 'header': 2 }],               // custom button values\r\n+  [{ 'list': 'ordered'}, { 'list': 'bullet' }],\r\n+  [{ 'script': 'sub'}, { 'script': 'super' }],      // superscript/subscript\r\n+  [{ 'indent': '-1'}, { 'indent': '+1' }],          // outdent/indent\r\n+  [{ 'direction': 'rtl' }],                         // text direction\r\n+\r\n+  [{ 'size': ['small', false, 'large', 'huge'] }],  // custom dropdown\r\n+  [{ 'header': [1, 2, 3, 4, 5, 6, false] }],\r\n+\r\n+  [{ 'color': [] }, { 'background': [] }],          // dropdown with defaults from theme\r\n+  [{ 'font': [] }],\r\n+  [{ 'align': [] }],\r\n+\r\n+  ['clean']                                         // remove formatting button\r\n+];\r\n+\r\n+\r\n+\r\n+\r\n+const ProjectsDashboard = () => {\r\n+      const[description,setDescription]=useState(\"\")\r\n+      const[title,setTitle]=useState(\"\")\r\n+      const [file, setFile] = useState<props[]>([]);\r\n+      const router=useRouter()\r\n+      const [user, loading, errorUser] = useAuthState(auth);\r\n+      const[userValue,setUserValue]=useRecoilState(adminUserState)\r\n+      const[error,setError]=useState(\"\")\r\n+      const regex = /^\\s*$/;\r\n+      \r\n+\r\n+const sanitizedHTML = description.trim().replace(/<p><br><\\/p>/g, '')\r\n+        const onSelectImage = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n+    const reader = new FileReader();\r\n+    if(file.length >= 7 ){\r\n+        return\r\n+    }\r\n+    if (event.target.files?.[0]) {\r\n+      reader.readAsDataURL(event.target.files[0]);\r\n+    }\r\n+\r\n+    reader.onload = (readerEvent) => {\r\n+      if (readerEvent.target?.result) {\r\n+        setFile((prevImage)=>[...prevImage,{image:readerEvent.target?.result as string,id:Date.now() as number}]);\r\n+      }\r\n+    };\r\n+  };\r\n+  \r\n+  const onRemoveImage=(id:number)=>{\r\n+setFile((prevImage)=>prevImage.filter((item)=>item.id != id))\r\n+\r\n+  }\r\n+\r\n+const handleSubmit= async()=>{\r\n+      // test if the title and description is empty\r\n+        if (regex.test(title) ||  sanitizedHTML == ''  ){\r\n+      // Empty string\r\n+       setError('Input values can not be  empty');\r\n+     alert(\"Input values can not be  empty\")\r\n+    setTimeout(()=>{\r\n+setError(\"\")\r\n+    },8000)\r\n+     return\r\n+    }\r\n+\r\n+    try{\r\n+const projectData:any={\r\n+    title,\r\n+    description,\r\n+    createdAt:Timestamp.fromDate(new Date()),\r\n+    creatorId:user?.email,\r\n+   \r\n+}\r\n+const docRef = await addDoc(collection(db, \"projects\"),projectData);\r\n+\r\n+// update file images in the database\r\n+if(file.length>0){\r\n+  file.map(async (img,index)=>{\r\n+   const imageRef = ref(storage, `projects/${img.id}/image`);\r\n+      await uploadString(imageRef, img.image, \"data_url\");\r\n+      const downloadURL =   await getDownloadURL(imageRef);\r\n+      await updateDoc(doc(db, \"projects\", docRef.id), {\r\n+       imageURL: arrayUnion({id:img.id,image:downloadURL})\r\n+      });\r\n+     \r\n+})\r\n+}\r\n+\r\n+toast.success(\"Project Created Successfully\",{position:\"top-center\",autoClose:1500,theme:\"light\"})\r\n+router.push('/admin/projects')\r\n+    }\r\n+    catch(error:any){\r\n+      toast.error(\"An Error Ocurred\",{position:\"top-center\",autoClose:1500,theme:\"light\"})\r\n+      \r\n+    }\r\n+\r\n+}\r\n+\r\n+\r\n+const  getUser= async(id:any)=>{\r\n+ const docRef = doc(db, \"Admin\", id);\r\n+const docSnap = await getDoc(docRef);\r\n+\r\n+if (docSnap.exists()) {\r\n+  const userData:any=docSnap.data()\r\n+setUserValue(userData)\r\n+}\r\n+ else {\r\n+ \r\n+}\r\n+    }\r\n     \r\n-    return <div>Have a good coding</div>\r\n+useEffect(()=>{\r\n+if(user){\r\n+ getUser(user.email)\r\n }\r\n-export default EditProject;\n+\r\n+},[user,loading,error])\r\n+\r\n+  return (\r\n+    <Flex position='relative' mt={\"15vh\"} justify='center' align='center'>\r\n+<Flex bg='white'  justify='space-around' mb={\"10vh\"} flexDirection={{base:\"column\"}} boxShadow='md' p='6' rounded='md' width={{base:\"85%\",md:\"70%\"}}>\r\n+\r\n+    {/* title of the project */}\r\n+    <Flex mb={\"5vh\"} width={{base:\"100%\",lg:\"100%\"}} flexDirection={{base:\"column\",lg:\"row\"}}>\r\n+<Input type='text' value={title} onChange={(e)=>setTitle(e.target.value)} placeholder='Project Title'/>\r\n+    </Flex>\r\n+\r\n+      {/* image upload and stack */}\r\n+      <Flex flexWrap={\"wrap\"} width={\"100%\"} mt={\"10px\"}>\r\n+   <label   className='w-[90px] h-20 cursor-pointer bg-gray-300 text-sm text-gray-500 rounded-lg border flex justify-center items-center'>\r\n+     \r\n+<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" strokeWidth={1.5} stroke=\"currentColor\" className=\"ml-1 mr-1 w-4 h-4\">\r\n+  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M3 16.5v2.25A2.25 2.25 0 005.25 21h13.5A2.25 2.25 0 0021 18.75V16.5m-13.5-9L12 3m0 0l4.5 4.5M12 3v13.5\" />\r\n+</svg>\r\n+     Upload\r\n+<input type=\"file\" className='hidden' accept=\"image/*\" onChange={onSelectImage} />\r\n+\r\n+        </label>\r\n+       {file.length>0 ?\"\": <Flex mt={\"20px\"} ml={\"10px\"}>\r\n+          <Text>No Photos Uploaded</Text>\r\n+        </Flex>}\r\n+        \r\n+        {file.map((img,index)=>{\r\n+         \r\n+            return(\r\n+              <Stack key={img?.id} direction='row' position=\"relative\">\r\n+  <Image\r\n+\r\n+  position=\"relative\"\r\n+  ml={\"10px\"}\r\n+  mt=\"10px\"\r\n+  borderRadius={\"10px\"}\r\n+    boxSize='68px' \r\n+    objectFit='cover'\r\n+    src={img?.image}\r\n+    alt='Dan Abramov'\r\n+  />\r\n+ <Icon onClick={()=>onRemoveImage(img.id)}  as={MdOutlineCancel} cursor={\"pointer\"} color={'red.500'} fontSize={\"22px\"} position=\"absolute\" right={\"0px\"} top={\"8px\"}/>\r\n+\r\n+\r\n+\r\n+</Stack>\r\n+            )\r\n+        })}\r\n+        </Flex>\r\n+\r\n+\r\n+\r\n+{/* text-editor and submitand cancel button */}\r\n+<Flex mt={\"5vh\"}  width={{base:'100%',lg:\"100%\"}} flexDir='column' >\r\n+  <ReactQuill value={description} \r\n+  className='h-[300px] mb-12 lg:h-[400px] w-full'\r\n+ onChange={setDescription} placeholder=\"Project description\"\r\n+ modules={EditorModule}  formats={formats}\r\n+ theme=\"snow\" />\r\n+\r\n+    <Flex mt={{base:\"15vh\",lg:\"10vh\"}} justify='flex-end' >\r\n+        <Button onClick={handleSubmit} color='white'  colorScheme='blue' mr={\"30px\"}>Submit</Button>\r\n+        <Button onClick={()=>router.push('/admin/projects')} variant=\"outline\"  colorScheme='red' >Cancel</Button> \r\n+    </Flex>\r\n+\r\n+</Flex>\r\n+\r\n+\r\n+\r\n+</Flex>\r\n+    </Flex>\r\n+  )\r\n+}\r\n+\r\n+export default ProjectsDashboard\n\\ No newline at end of file\n"
                },
                {
                    "date": 1695205643155,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,9 +72,9 @@\n \r\n \r\n \r\n \r\n-const E = () => {\r\n+const EditP = () => {\r\n       const[description,setDescription]=useState(\"\")\r\n       const[title,setTitle]=useState(\"\")\r\n       const [file, setFile] = useState<props[]>([]);\r\n       const router=useRouter()\r\n"
                },
                {
                    "date": 1695205920224,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,8 +72,9 @@\n \r\n \r\n \r\n \r\n+\r\n const EditProject = () => {\r\n       const[description,setDescription]=useState(\"\")\r\n       const[title,setTitle]=useState(\"\")\r\n       const [file, setFile] = useState<props[]>([]);\r\n"
                }
            ],
            "date": 1695204962786,
            "name": "Commit-0",
            "content": "rafce"
        }
    ]
}