{
    "sourceFile": "src/components/ProjectTable.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 17,
            "patches": [
                {
                    "date": 1695047938330,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1695047956048,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,9 @@\n-rafce\n\\ No newline at end of file\n+import React from 'react'\r\n+\r\n+const ProjectTable = () => {\r\n+  return (\r\n+    <div>ProjectTable</div>\r\n+  )\r\n+}\r\n+\r\n+export default ProjectTable\n\\ No newline at end of file\n"
                },
                {
                    "date": 1695047975505,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,226 @@\n-import React from 'react'\r\n+import { Flex,Text,Link,Button,Icon,Input,useDisclosure } from '@chakra-ui/react';\r\n+import React,{useState,useEffect} from 'react';\r\n+import {AiOutlinePlus} from \"react-icons/ai\"\r\n+import {\r\n+  Table,\r\n+  Thead,\r\n+  Tbody,\r\n+  Tfoot,\r\n\\ No newline at end of file\n+  Tr,\r\n+  Th,\r\n+  Td,\r\n+  TableCaption,\r\n+  TableContainer,\r\n+} from '@chakra-ui/react'\r\n+import { useRouter } from 'next/router';\r\n+import { auth,db,storage } from '@/firebase/firebase';\r\n+import { collection,deleteDoc, getDocs,doc,serverTimestamp,Timestamp, query, where, orderBy } from \"firebase/firestore\";\r\n+import { useAuthState } from 'react-firebase-hooks/auth';\r\n+import {\r\n+  Modal,\r\n+  ModalOverlay,\r\n+  ModalContent,\r\n+  ModalHeader,\r\n+  ModalFooter,\r\n+  ModalBody,\r\n+  ModalCloseButton,\r\n+} from '@chakra-ui/react'\r\n+      import {\r\n+  Menu,\r\n+  MenuButton,\r\n+  MenuList,\r\n+  MenuItem,\r\n+  MenuItemOption,\r\n+  MenuGroup,\r\n+  MenuOptionGroup,\r\n+  MenuDivider,\r\n+} from '@chakra-ui/react'\r\n+import { ref, deleteObject } from \"firebase/storage\";\r\n \r\n-const ProjectTable = () => {\r\n-  return (\r\n-    <div>ProjectTable</div>\r\n-  )\r\n+import { BsPlus } from \"react-icons/bs\";\r\n+import { MdDeleteOutline } from \"react-icons/md\";\r\n+import { CiEdit } from \"react-icons/ci\";\r\n+import { FiMoreHorizontal } from \"react-icons/fi\";\r\n+import { useRecoilState } from 'recoil';\r\n+import { productState } from '@/atoms/Products';\r\n+\r\n+\r\n+type ProductTableProps = {\r\n+    \r\n+};\r\n+\r\n+const ProductTable:React.FC<ProductTableProps> = () => {\r\n+  const[user,loading,error]=useAuthState(auth)\r\n+   const[products,setProducts]=useState([])\r\n+    const { isOpen, onOpen, onClose } = useDisclosure()\r\n+    const router =useRouter()\r\n+    const citiesRef = collection(db, \"products\");\r\n+     const[deleteProduct,setDeleteProduct]=useState<any>([])\r\n+     const[name,setName]=useState(\"\")\r\n+    const [editProduct, setEditProduct] = useRecoilState(productState);\r\n+\r\n+const nextPage=()=>{\r\n+    router.push('/admin/newproducts')\r\n }\r\n \r\n-export default ProjectTable\n+const getProducts = async () => {\r\n+    try {\r\n+      const productsQuery = query(\r\n+        collection(db, \"products\"),\r\n+        where(\"creatorId\", \"==\", user?.email),\r\n+        \r\n+      );\r\n+      const productDocs = await getDocs(productsQuery);\r\n+      const comments = productDocs.docs.map((doc) => ({\r\n+        id: doc.id,\r\n+        ...doc.data(),\r\n+      }));\r\n+     \r\n+      setProducts(comments as any);\r\n+\r\n+    } catch (error: any) {\r\n+      console.log(\"getPostComments error\", error.message);\r\n+    }\r\n+  \r\n+  };\r\n+\r\n+  useEffect(() => {\r\n+  \r\n+\r\n+    getProducts();\r\n+  }, [user]);\r\n+\r\n+\r\n+const onDeleteProduct = async (product:any)=>{\r\n+setDeleteProduct(product)\r\n+onOpen()\r\n+}\r\n+const deletingProduct=async()=>{\r\n+  try{\r\n+  await deleteDoc(doc(db, \"products\", deleteProduct.id));\r\n+  onClose()\r\n+    setProducts((prevImage:any)=>prevImage.filter((item:any)=>item.id != deleteProduct.id))\r\n+\r\n+      \r\n+        deleteProduct.imageURL.map(async (img:any)=>{\r\n+   const imageRef = ref(storage, `products/${img.id}/image`);\r\n+     deleteObject(imageRef).then(() => {\r\n+  // File deleted successfully\r\n+}).catch((error:any) => {\r\n+  // Uh-oh, an error occurred!\r\n+});\r\n+     \r\n+})\r\n+\r\n+ \r\n+}catch(err){\r\n+\r\n+}\r\n+}\r\n+\r\n+const onEditProduct=async(product:any)=>{\r\n+setEditProduct(product)\r\n+ router.push(`/admin/edit/${product.id}`)\r\n+}\r\n+\r\n+    return <Flex  position='relative' mt={\"20vh\"} justify='center' align='center' >\r\n+<Flex mb={\"10vh\"} flexDirection='column' boxShadow='dark-lg' p='6' rounded='md' width={{base:\"85%\",md:\"50%\"}}>\r\n+\r\n+\r\n+    {/* addproduct button and search bar */}\r\n+<Flex justify={'space-between'} align='center'>\r\n+<Button onClick={nextPage} _hover={{bg:\"blue.400\"}} p={{base:\"5\",lg:\"2\"}} cursor='pointer' color='white' borderRadius={\"10px\"} bg={\" blue.500\"}>\r\n+     <Icon color='white' fontSize={'20px'} as={AiOutlinePlus}/> Add Products\r\n+     </Button>\r\n+     <Input borderRadius={'10px'} width={'60%'} ml={\"20px\"} placeholder='Search Products'/>\r\n+</Flex>\r\n+\r\n+\r\n+{/* product table */}\r\n+<Flex  mt={\"5vh\"}>\r\n+<TableContainer height={\"50vh\"} overflowY={\"scroll\"} width={\"100%\"}  >\r\n+  <Table variant='simple'>\r\n+    <TableCaption>Products from Wurvicat</TableCaption>\r\n+    <Thead>\r\n+      <Tr>\r\n+        <Th>Products</Th>\r\n+        <Th>CreatedAt</Th>\r\n+        <Th isNumeric>Options</Th>\r\n+      </Tr>\r\n+    </Thead>\r\n+     <Tbody>\r\n+     \r\n+      {products.filter((item:any)=>{\r\n+        return item.name.toLowerCase() ===\"\"?item :item.name.toLowerCase().includes(name.toLowerCase())\r\n+      } ).map((product:any,index:any)=>{\r\n+        \r\n+        \r\n+        return(\r\n+\r\n+            <Tr key={index}>\r\n+        <Td>{product.name.charAt(0).toUpperCase() + product.name.slice(1)}</Td>\r\n+        \r\n+            <Td >\r\n+          {new Date(product.createdAt.seconds *1000).toDateString()}\r\n+        </Td>\r\n+            <Td zIndex={1}   isNumeric>\r\n+                 <Menu>\r\n+  <MenuButton \r\n+   px={4}\r\n+   fontSize={\"20px\"}\r\n+    py={2}\r\n+    bg={\"transparent\"}\r\n+    transition='all 0.2s'\r\n+    borderRadius='md'\r\n+    border=\"none\"\r\n+    color=\"black\"\r\n+    borderWidth='1px'\r\n+    _hover={{ bg: 'transparent' }}\r\n+    _expanded={{ bg: 'transparent' }}\r\n+   \r\n+    _focus={{  bg: 'transparent' }}\r\n+  as={Button}  leftIcon={<FiMoreHorizontal /> } >\r\n+  \r\n+  </MenuButton>\r\n+  <MenuList   zIndex={3}>\r\n+    <MenuItem onClick={()=>onEditProduct(product)} color={\"blue.400\"}>Edit <Icon ml={\"3px\"} as={CiEdit}/></MenuItem>\r\n+    <MenuItem onClick={()=>onDeleteProduct(product)} color={\"red\"} >Delete <Icon ml={\"2px\"} as={MdDeleteOutline}/></MenuItem>\r\n+    \r\n+  </MenuList>\r\n+</Menu>\r\n+        </Td>\r\n+        \r\n+      \r\n+      </Tr>\r\n+ \r\n+        )\r\n+    \r\n+      })}\r\n+\r\n+    </Tbody>\r\n+ \r\n+  </Table>\r\n+</TableContainer>\r\n+\r\n+</Flex>\r\n+<Modal isOpen={isOpen} onClose={onClose}>\r\n+        <ModalOverlay />\r\n+        <ModalContent>\r\n+          <ModalHeader>Delete {deleteProduct.name}</ModalHeader>\r\n+          <ModalBody>\r\n+<Flex>  Are you sure  you want to delete <Text ml={\"4px\"} fontWeight={\"700\"}>{deleteProduct.name}</Text>  </Flex>\r\n+         <Text> Products deleted can not be retrieved</Text>\r\n+          </ModalBody>\r\n+\r\n+          <ModalFooter>\r\n+            <Button colorScheme='blue' mr={3} onClick={onClose}>\r\n+              Close\r\n+            </Button>\r\n+            <Button colorScheme='red' onClick={deletingProduct}  bg={\"red.500\"}>Delete</Button>\r\n+          </ModalFooter>\r\n+        </ModalContent>\r\n+      </Modal>\r\n+</Flex>\r\n+    </Flex>\r\n+}\r\n+export default ProductTable;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1695048071772,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n type ProductTableProps = {\r\n     \r\n };\r\n \r\n-const ProductTable:React.FC<ProductTableProps> = () => {\r\n+const ProjectTable:React.FC<ProductTableProps> = () => {\r\n   const[user,loading,error]=useAuthState(auth)\r\n    const[products,setProducts]=useState([])\r\n     const { isOpen, onOpen, onClose } = useDisclosure()\r\n     const router =useRouter()\r\n@@ -222,5 +222,5 @@\n       </Modal>\r\n </Flex>\r\n     </Flex>\r\n }\r\n-export default ProductTable;\n\\ No newline at end of file\n+export default ProjecttTable;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1695048095017,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -222,5 +222,5 @@\n       </Modal>\r\n </Flex>\r\n     </Flex>\r\n }\r\n-export default ProjecttTable;\n\\ No newline at end of file\n+export default ProjectTable;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1695048122413,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,226 @@\n+import { Flex,Text,Link,Button,Icon,Input,useDisclosure } from '@chakra-ui/react';\r\n+import React,{useState,useEffect} from 'react';\r\n+import {AiOutlinePlus} from \"react-icons/ai\"\r\n+import {\r\n+  Table,\r\n+  Thead,\r\n+  Tbody,\r\n+  Tfoot,\r\n+  Tr,\r\n+  Th,\r\n+  Td,\r\n+  TableCaption,\r\n+  TableContainer,\r\n+} from '@chakra-ui/react'\r\n+import { useRouter } from 'next/router';\r\n+import { auth,db,storage } from '@/firebase/firebase';\r\n+import { collection,deleteDoc, getDocs,doc,serverTimestamp,Timestamp, query, where, orderBy } from \"firebase/firestore\";\r\n+import { useAuthState } from 'react-firebase-hooks/auth';\r\n+import {\r\n+  Modal,\r\n+  ModalOverlay,\r\n+  ModalContent,\r\n+  ModalHeader,\r\n+  ModalFooter,\r\n+  ModalBody,\r\n+  ModalCloseButton,\r\n+} from '@chakra-ui/react'\r\n+      import {\r\n+  Menu,\r\n+  MenuButton,\r\n+  MenuList,\r\n+  MenuItem,\r\n+  MenuItemOption,\r\n+  MenuGroup,\r\n+  MenuOptionGroup,\r\n+  MenuDivider,\r\n+} from '@chakra-ui/react'\r\n+import { ref, deleteObject } from \"firebase/storage\";\r\n+\r\n+import { BsPlus } from \"react-icons/bs\";\r\n+import { MdDeleteOutline } from \"react-icons/md\";\r\n+import { CiEdit } from \"react-icons/ci\";\r\n+import { FiMoreHorizontal } from \"react-icons/fi\";\r\n+import { useRecoilState } from 'recoil';\r\n+import { productState } from '@/atoms/Products';\r\n+\r\n+\r\n+type ProductTableProps = {\r\n+    \r\n+};\r\n+\r\n+const ProjectTable:React.FC<ProductTableProps> = () => {\r\n+  const[user,loading,error]=useAuthState(auth)\r\n+   const[products,setProducts]=useState([])\r\n+    const { isOpen, onOpen, onClose } = useDisclosure()\r\n+    const router =useRouter()\r\n+    const citiesRef = collection(db, \"products\");\r\n+     const[deleteProduct,setDeleteProduct]=useState<any>([])\r\n+     const[name,setName]=useState(\"\")\r\n+    const [editProduct, setEditProduct] = useRecoilState(productState);\r\n+\r\n+const nextPage=()=>{\r\n+    router.push('/admin/newprod')\r\n+}\r\n+\r\n+const getProducts = async () => {\r\n+    try {\r\n+      const productsQuery = query(\r\n+        collection(db, \"products\"),\r\n+        where(\"creatorId\", \"==\", user?.email),\r\n+        \r\n+      );\r\n+      const productDocs = await getDocs(productsQuery);\r\n+      const comments = productDocs.docs.map((doc) => ({\r\n+        id: doc.id,\r\n+        ...doc.data(),\r\n+      }));\r\n+     \r\n+      setProducts(comments as any);\r\n+\r\n+    } catch (error: any) {\r\n+      console.log(\"getPostComments error\", error.message);\r\n+    }\r\n+  \r\n+  };\r\n+\r\n+  useEffect(() => {\r\n+  \r\n+\r\n+    getProducts();\r\n+  }, [user]);\r\n+\r\n+\r\n+const onDeleteProduct = async (product:any)=>{\r\n+setDeleteProduct(product)\r\n+onOpen()\r\n+}\r\n+const deletingProduct=async()=>{\r\n+  try{\r\n+  await deleteDoc(doc(db, \"products\", deleteProduct.id));\r\n+  onClose()\r\n+    setProducts((prevImage:any)=>prevImage.filter((item:any)=>item.id != deleteProduct.id))\r\n+\r\n+      \r\n+        deleteProduct.imageURL.map(async (img:any)=>{\r\n+   const imageRef = ref(storage, `products/${img.id}/image`);\r\n+     deleteObject(imageRef).then(() => {\r\n+  // File deleted successfully\r\n+}).catch((error:any) => {\r\n+  // Uh-oh, an error occurred!\r\n+});\r\n+     \r\n+})\r\n+\r\n+ \r\n+}catch(err){\r\n+\r\n+}\r\n+}\r\n+\r\n+const onEditProduct=async(product:any)=>{\r\n+setEditProduct(product)\r\n+ router.push(`/admin/edit/${product.id}`)\r\n+}\r\n+\r\n+    return <Flex  position='relative' mt={\"20vh\"} justify='center' align='center' >\r\n+<Flex mb={\"10vh\"} flexDirection='column' boxShadow='dark-lg' p='6' rounded='md' width={{base:\"85%\",md:\"50%\"}}>\r\n+\r\n+\r\n+    {/* addproduct button and search bar */}\r\n+<Flex justify={'space-between'} align='center'>\r\n+<Button onClick={nextPage} _hover={{bg:\"blue.400\"}} p={{base:\"5\",lg:\"2\"}} cursor='pointer' color='white' borderRadius={\"10px\"} bg={\" blue.500\"}>\r\n+     <Icon color='white' fontSize={'20px'} as={AiOutlinePlus}/> Add Products\r\n+     </Button>\r\n+     <Input borderRadius={'10px'} width={'60%'} ml={\"20px\"} placeholder='Search Products'/>\r\n+</Flex>\r\n+\r\n+\r\n+{/* product table */}\r\n+<Flex  mt={\"5vh\"}>\r\n+<TableContainer height={\"50vh\"} overflowY={\"scroll\"} width={\"100%\"}  >\r\n+  <Table variant='simple'>\r\n+    <TableCaption>Products from Wurvicat</TableCaption>\r\n+    <Thead>\r\n+      <Tr>\r\n+        <Th>Products</Th>\r\n+        <Th>CreatedAt</Th>\r\n+        <Th isNumeric>Options</Th>\r\n+      </Tr>\r\n+    </Thead>\r\n+     <Tbody>\r\n+     \r\n+      {products.filter((item:any)=>{\r\n+        return item.name.toLowerCase() ===\"\"?item :item.name.toLowerCase().includes(name.toLowerCase())\r\n+      } ).map((product:any,index:any)=>{\r\n+        \r\n+        \r\n+        return(\r\n+\r\n+            <Tr key={index}>\r\n+        <Td>{product.name.charAt(0).toUpperCase() + product.name.slice(1)}</Td>\r\n+        \r\n+            <Td >\r\n+          {new Date(product.createdAt.seconds *1000).toDateString()}\r\n+        </Td>\r\n+            <Td zIndex={1}   isNumeric>\r\n+                 <Menu>\r\n+  <MenuButton \r\n+   px={4}\r\n+   fontSize={\"20px\"}\r\n+    py={2}\r\n+    bg={\"transparent\"}\r\n+    transition='all 0.2s'\r\n+    borderRadius='md'\r\n+    border=\"none\"\r\n+    color=\"black\"\r\n+    borderWidth='1px'\r\n+    _hover={{ bg: 'transparent' }}\r\n+    _expanded={{ bg: 'transparent' }}\r\n+   \r\n+    _focus={{  bg: 'transparent' }}\r\n+  as={Button}  leftIcon={<FiMoreHorizontal /> } >\r\n+  \r\n+  </MenuButton>\r\n+  <MenuList   zIndex={3}>\r\n+    <MenuItem onClick={()=>onEditProduct(product)} color={\"blue.400\"}>Edit <Icon ml={\"3px\"} as={CiEdit}/></MenuItem>\r\n+    <MenuItem onClick={()=>onDeleteProduct(product)} color={\"red\"} >Delete <Icon ml={\"2px\"} as={MdDeleteOutline}/></MenuItem>\r\n+    \r\n+  </MenuList>\r\n+</Menu>\r\n+        </Td>\r\n+        \r\n+      \r\n+      </Tr>\r\n+ \r\n+        )\r\n+    \r\n+      })}\r\n+\r\n+    </Tbody>\r\n+ \r\n+  </Table>\r\n+</TableContainer>\r\n+\r\n+</Flex>\r\n+<Modal isOpen={isOpen} onClose={onClose}>\r\n+        <ModalOverlay />\r\n+        <ModalContent>\r\n+          <ModalHeader>Delete {deleteProduct.name}</ModalHeader>\r\n+          <ModalBody>\r\n+<Flex>  Are you sure  you want to delete <Text ml={\"4px\"} fontWeight={\"700\"}>{deleteProduct.name}</Text>  </Flex>\r\n+         <Text> Products deleted can not be retrieved</Text>\r\n+          </ModalBody>\r\n+\r\n+          <ModalFooter>\r\n+            <Button colorScheme='blue' mr={3} onClick={onClose}>\r\n+              Close\r\n+            </Button>\r\n+            <Button colorScheme='red' onClick={deletingProduct}  bg={\"red.500\"}>Delete</Button>\r\n+          </ModalFooter>\r\n+        </ModalContent>\r\n+      </Modal>\r\n+</Flex>\r\n+    </Flex>\r\n+}\r\n+export default ProjectTable;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1695048160183,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,15 +59,15 @@\n      const[name,setName]=useState(\"\")\r\n     const [editProduct, setEditProduct] = useRecoilState(productState);\r\n \r\n const nextPage=()=>{\r\n-    router.push('/admin/newprod')\r\n+    router.push('/admin/newprojects')\r\n }\r\n \r\n const getProducts = async () => {\r\n     try {\r\n       const productsQuery = query(\r\n-        collection(db, \"products\"),\r\n+        collection(db, \"projects\"),\r\n         where(\"creatorId\", \"==\", user?.email),\r\n         \r\n       );\r\n       const productDocs = await getDocs(productsQuery);\r\n@@ -222,231 +222,5 @@\n       </Modal>\r\n </Flex>\r\n     </Flex>\r\n }\r\n-export default ProjectTable;\n-import { Flex,Text,Link,Button,Icon,Input,useDisclosure } from '@chakra-ui/react';\r\n-import React,{useState,useEffect} from 'react';\r\n-import {AiOutlinePlus} from \"react-icons/ai\"\r\n-import {\r\n-  Table,\r\n-  Thead,\r\n-  Tbody,\r\n-  Tfoot,\r\n-  Tr,\r\n-  Th,\r\n-  Td,\r\n-  TableCaption,\r\n-  TableContainer,\r\n-} from '@chakra-ui/react'\r\n-import { useRouter } from 'next/router';\r\n-import { auth,db,storage } from '@/firebase/firebase';\r\n-import { collection,deleteDoc, getDocs,doc,serverTimestamp,Timestamp, query, where, orderBy } from \"firebase/firestore\";\r\n-import { useAuthState } from 'react-firebase-hooks/auth';\r\n-import {\r\n-  Modal,\r\n-  ModalOverlay,\r\n-  ModalContent,\r\n-  ModalHeader,\r\n-  ModalFooter,\r\n-  ModalBody,\r\n-  ModalCloseButton,\r\n-} from '@chakra-ui/react'\r\n-      import {\r\n-  Menu,\r\n-  MenuButton,\r\n-  MenuList,\r\n-  MenuItem,\r\n-  MenuItemOption,\r\n-  MenuGroup,\r\n-  MenuOptionGroup,\r\n-  MenuDivider,\r\n-} from '@chakra-ui/react'\r\n-import { ref, deleteObject } from \"firebase/storage\";\r\n-\r\n-import { BsPlus } from \"react-icons/bs\";\r\n-import { MdDeleteOutline } from \"react-icons/md\";\r\n-import { CiEdit } from \"react-icons/ci\";\r\n-import { FiMoreHorizontal } from \"react-icons/fi\";\r\n-import { useRecoilState } from 'recoil';\r\n-import { productState } from '@/atoms/Products';\r\n-\r\n-\r\n-type ProductTableProps = {\r\n-    \r\n-};\r\n-\r\n-const ProjectTable:React.FC<ProductTableProps> = () => {\r\n-  const[user,loading,error]=useAuthState(auth)\r\n-   const[products,setProducts]=useState([])\r\n-    const { isOpen, onOpen, onClose } = useDisclosure()\r\n-    const router =useRouter()\r\n-    const citiesRef = collection(db, \"products\");\r\n-     const[deleteProduct,setDeleteProduct]=useState<any>([])\r\n-     const[name,setName]=useState(\"\")\r\n-    const [editProduct, setEditProduct] = useRecoilState(productState);\r\n-\r\n-const nextPage=()=>{\r\n-    router.push('/admin/newproducts')\r\n-}\r\n-\r\n-const getProducts = async () => {\r\n-    try {\r\n-      const productsQuery = query(\r\n-        collection(db, \"products\"),\r\n-        where(\"creatorId\", \"==\", user?.email),\r\n-        \r\n-      );\r\n-      const productDocs = await getDocs(productsQuery);\r\n-      const comments = productDocs.docs.map((doc) => ({\r\n-        id: doc.id,\r\n-        ...doc.data(),\r\n-      }));\r\n-     \r\n-      setProducts(comments as any);\r\n-\r\n-    } catch (error: any) {\r\n-      console.log(\"getPostComments error\", error.message);\r\n-    }\r\n-  \r\n-  };\r\n-\r\n-  useEffect(() => {\r\n-  \r\n-\r\n-    getProducts();\r\n-  }, [user]);\r\n-\r\n-\r\n-const onDeleteProduct = async (product:any)=>{\r\n-setDeleteProduct(product)\r\n-onOpen()\r\n-}\r\n-const deletingProduct=async()=>{\r\n-  try{\r\n-  await deleteDoc(doc(db, \"products\", deleteProduct.id));\r\n-  onClose()\r\n-    setProducts((prevImage:any)=>prevImage.filter((item:any)=>item.id != deleteProduct.id))\r\n-\r\n-      \r\n-        deleteProduct.imageURL.map(async (img:any)=>{\r\n-   const imageRef = ref(storage, `products/${img.id}/image`);\r\n-     deleteObject(imageRef).then(() => {\r\n-  // File deleted successfully\r\n-}).catch((error:any) => {\r\n-  // Uh-oh, an error occurred!\r\n-});\r\n-     \r\n-})\r\n-\r\n- \r\n-}catch(err){\r\n-\r\n-}\r\n-}\r\n-\r\n-const onEditProduct=async(product:any)=>{\r\n-setEditProduct(product)\r\n- router.push(`/admin/edit/${product.id}`)\r\n-}\r\n-\r\n-    return <Flex  position='relative' mt={\"20vh\"} justify='center' align='center' >\r\n-<Flex mb={\"10vh\"} flexDirection='column' boxShadow='dark-lg' p='6' rounded='md' width={{base:\"85%\",md:\"50%\"}}>\r\n-\r\n-\r\n-    {/* addproduct button and search bar */}\r\n-<Flex justify={'space-between'} align='center'>\r\n-<Button onClick={nextPage} _hover={{bg:\"blue.400\"}} p={{base:\"5\",lg:\"2\"}} cursor='pointer' color='white' borderRadius={\"10px\"} bg={\" blue.500\"}>\r\n-     <Icon color='white' fontSize={'20px'} as={AiOutlinePlus}/> Add Products\r\n-     </Button>\r\n-     <Input borderRadius={'10px'} width={'60%'} ml={\"20px\"} placeholder='Search Products'/>\r\n-</Flex>\r\n-\r\n-\r\n-{/* product table */}\r\n-<Flex  mt={\"5vh\"}>\r\n-<TableContainer height={\"50vh\"} overflowY={\"scroll\"} width={\"100%\"}  >\r\n-  <Table variant='simple'>\r\n-    <TableCaption>Products from Wurvicat</TableCaption>\r\n-    <Thead>\r\n-      <Tr>\r\n-        <Th>Products</Th>\r\n-        <Th>CreatedAt</Th>\r\n-        <Th isNumeric>Options</Th>\r\n-      </Tr>\r\n-    </Thead>\r\n-     <Tbody>\r\n-     \r\n-      {products.filter((item:any)=>{\r\n-        return item.name.toLowerCase() ===\"\"?item :item.name.toLowerCase().includes(name.toLowerCase())\r\n-      } ).map((product:any,index:any)=>{\r\n-        \r\n-        \r\n-        return(\r\n-\r\n-            <Tr key={index}>\r\n-        <Td>{product.name.charAt(0).toUpperCase() + product.name.slice(1)}</Td>\r\n-        \r\n-            <Td >\r\n-          {new Date(product.createdAt.seconds *1000).toDateString()}\r\n-        </Td>\r\n-            <Td zIndex={1}   isNumeric>\r\n-                 <Menu>\r\n-  <MenuButton \r\n-   px={4}\r\n-   fontSize={\"20px\"}\r\n-    py={2}\r\n-    bg={\"transparent\"}\r\n-    transition='all 0.2s'\r\n-    borderRadius='md'\r\n-    border=\"none\"\r\n-    color=\"black\"\r\n-    borderWidth='1px'\r\n-    _hover={{ bg: 'transparent' }}\r\n-    _expanded={{ bg: 'transparent' }}\r\n-   \r\n-    _focus={{  bg: 'transparent' }}\r\n-  as={Button}  leftIcon={<FiMoreHorizontal /> } >\r\n-  \r\n-  </MenuButton>\r\n-  <MenuList   zIndex={3}>\r\n-    <MenuItem onClick={()=>onEditProduct(product)} color={\"blue.400\"}>Edit <Icon ml={\"3px\"} as={CiEdit}/></MenuItem>\r\n-    <MenuItem onClick={()=>onDeleteProduct(product)} color={\"red\"} >Delete <Icon ml={\"2px\"} as={MdDeleteOutline}/></MenuItem>\r\n-    \r\n-  </MenuList>\r\n-</Menu>\r\n-        </Td>\r\n-        \r\n-      \r\n-      </Tr>\r\n- \r\n-        )\r\n-    \r\n-      })}\r\n-\r\n-    </Tbody>\r\n- \r\n-  </Table>\r\n-</TableContainer>\r\n-\r\n-</Flex>\r\n-<Modal isOpen={isOpen} onClose={onClose}>\r\n-        <ModalOverlay />\r\n-        <ModalContent>\r\n-          <ModalHeader>Delete {deleteProduct.name}</ModalHeader>\r\n-          <ModalBody>\r\n-<Flex>  Are you sure  you want to delete <Text ml={\"4px\"} fontWeight={\"700\"}>{deleteProduct.name}</Text>  </Flex>\r\n-         <Text> Products deleted can not be retrieved</Text>\r\n-          </ModalBody>\r\n-\r\n-          <ModalFooter>\r\n-            <Button colorScheme='blue' mr={3} onClick={onClose}>\r\n-              Close\r\n-            </Button>\r\n-            <Button colorScheme='red' onClick={deletingProduct}  bg={\"red.500\"}>Delete</Button>\r\n-          </ModalFooter>\r\n-        </ModalContent>\r\n-      </Modal>\r\n-</Flex>\r\n-    </Flex>\r\n-}\r\n export default ProjectTable;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1695048224231,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,226 @@\n+import { Flex,Text,Link,Button,Icon,Input,useDisclosure } from '@chakra-ui/react';\r\n+import React,{useState,useEffect} from 'react';\r\n+import {AiOutlinePlus} from \"react-icons/ai\"\r\n+import {\r\n+  Table,\r\n+  Thead,\r\n+  Tbody,\r\n+  Tfoot,\r\n+  Tr,\r\n+  Th,\r\n+  Td,\r\n+  TableCaption,\r\n+  TableContainer,\r\n+} from '@chakra-ui/react'\r\n+import { useRouter } from 'next/router';\r\n+import { auth,db,storage } from '@/firebase/firebase';\r\n+import { collection,deleteDoc, getDocs,doc,serverTimestamp,Timestamp, query, where, orderBy } from \"firebase/firestore\";\r\n+import { useAuthState } from 'react-firebase-hooks/auth';\r\n+import {\r\n+  Modal,\r\n+  ModalOverlay,\r\n+  ModalContent,\r\n+  ModalHeader,\r\n+  ModalFooter,\r\n+  ModalBody,\r\n+  ModalCloseButton,\r\n+} from '@chakra-ui/react'\r\n+      import {\r\n+  Menu,\r\n+  MenuButton,\r\n+  MenuList,\r\n+  MenuItem,\r\n+  MenuItemOption,\r\n+  MenuGroup,\r\n+  MenuOptionGroup,\r\n+  MenuDivider,\r\n+} from '@chakra-ui/react'\r\n+import { ref, deleteObject } from \"firebase/storage\";\r\n+\r\n+import { BsPlus } from \"react-icons/bs\";\r\n+import { MdDeleteOutline } from \"react-icons/md\";\r\n+import { CiEdit } from \"react-icons/ci\";\r\n+import { FiMoreHorizontal } from \"react-icons/fi\";\r\n+import { useRecoilState } from 'recoil';\r\n+import { productState } from '@/atoms/Products';\r\n+\r\n+\r\n+type ProductTableProps = {\r\n+    \r\n+};\r\n+\r\n+const ProjectTable:React.FC<ProductTableProps> = () => {\r\n+  const[user,loading,error]=useAuthState(auth)\r\n+   const[products,setProducts]=useState([])\r\n+    const { isOpen, onOpen, onClose } = useDisclosure()\r\n+    const router =useRouter()\r\n+    const citiesRef = collection(db, \"products\");\r\n+     const[deleteProduct,setDeleteProduct]=useState<any>([])\r\n+     const[name,setName]=useState(\"\")\r\n+    const [editProduct, setEditProduct] = useRecoilState(productState);\r\n+\r\n+const nextPage=()=>{\r\n+    router.push('/admin/newprojects')\r\n+}\r\n+\r\n+const getProducts = async () => {\r\n+    try {\r\n+      const productsQuery = query(\r\n+        collection(db, \"projects\"),\r\n+        where(\"creatorId\", \"==\", user?.email),\r\n+        \r\n+      );\r\n+      const productDocs = await getDocs(productsQuery);\r\n+      const comments = productDocs.docs.map((doc) => ({\r\n+        id: doc.id,\r\n+        ...doc.data(),\r\n+      }));\r\n+     \r\n+      setProducts(comments as any);\r\n+\r\n+    } catch (error: any) {\r\n+      console.log(\"getPostComments error\", error.message);\r\n+    }\r\n+  \r\n+  };\r\n+\r\n+  useEffect(() => {\r\n+  \r\n+\r\n+    getProducts();\r\n+  }, [user]);\r\n+\r\n+\r\n+const onDeleteProduct = async (product:any)=>{\r\n+setDeleteProduct(product)\r\n+onOpen()\r\n+}\r\n+const deletingProduct=async()=>{\r\n+  try{\r\n+  await deleteDoc(doc(db, \"products\", deleteProduct.id));\r\n+  onClose()\r\n+    setProducts((prevImage:any)=>prevImage.filter((item:any)=>item.id != deleteProduct.id))\r\n+\r\n+      \r\n+        deleteProduct.imageURL.map(async (img:any)=>{\r\n+   const imageRef = ref(storage, `products/${img.id}/image`);\r\n+     deleteObject(imageRef).then(() => {\r\n+  // File deleted successfully\r\n+}).catch((error:any) => {\r\n+  // Uh-oh, an error occurred!\r\n+});\r\n+     \r\n+})\r\n+\r\n+ \r\n+}catch(err){\r\n+\r\n+}\r\n+}\r\n+\r\n+const onEditProduct=async(product:any)=>{\r\n+setEditProduct(product)\r\n+ router.push(`/admin/edit/${product.id}`)\r\n+}\r\n+\r\n+    return <Flex  position='relative' mt={\"20vh\"} justify='center' align='center' >\r\n+<Flex mb={\"10vh\"} flexDirection='column' boxShadow='dark-lg' p='6' rounded='md' width={{base:\"85%\",md:\"50%\"}}>\r\n+\r\n+\r\n+    {/* addproduct button and search bar */}\r\n+<Flex justify={'space-between'} align='center'>\r\n+<Button onClick={nextPage} _hover={{bg:\"blue.400\"}} p={{base:\"5\",lg:\"2\"}} cursor='pointer' color='white' borderRadius={\"10px\"} bg={\" blue.500\"}>\r\n+     <Icon color='white' fontSize={'20px'} as={AiOutlinePlus}/> Add Products\r\n+     </Button>\r\n+     <Input borderRadius={'10px'} width={'60%'} ml={\"20px\"} placeholder='Search Products'/>\r\n+</Flex>\r\n+\r\n+\r\n+{/* product table */}\r\n+<Flex  mt={\"5vh\"}>\r\n+<TableContainer height={\"50vh\"} overflowY={\"scroll\"} width={\"100%\"}  >\r\n+  <Table variant='simple'>\r\n+    <TableCaption>Products from Wurvicat</TableCaption>\r\n+    <Thead>\r\n+      <Tr>\r\n+        <Th>Products</Th>\r\n+        <Th>CreatedAt</Th>\r\n+        <Th isNumeric>Options</Th>\r\n+      </Tr>\r\n+    </Thead>\r\n+     <Tbody>\r\n+     \r\n+      {products.filter((item:any)=>{\r\n+        return item.title.toLowerCase() ===\"\"?item :item.name.toLowerCase().includes(name.toLowerCase())\r\n+      } ).map((product:any,index:any)=>{\r\n+        \r\n+        \r\n+        return(\r\n+\r\n+            <Tr key={index}>\r\n+        <Td>{product.name.charAt(0).toUpperCase() + product.name.slice(1)}</Td>\r\n+        \r\n+            <Td >\r\n+          {new Date(product.createdAt.seconds *1000).toDateString()}\r\n+        </Td>\r\n+            <Td zIndex={1}   isNumeric>\r\n+                 <Menu>\r\n+  <MenuButton \r\n+   px={4}\r\n+   fontSize={\"20px\"}\r\n+    py={2}\r\n+    bg={\"transparent\"}\r\n+    transition='all 0.2s'\r\n+    borderRadius='md'\r\n+    border=\"none\"\r\n+    color=\"black\"\r\n+    borderWidth='1px'\r\n+    _hover={{ bg: 'transparent' }}\r\n+    _expanded={{ bg: 'transparent' }}\r\n+   \r\n+    _focus={{  bg: 'transparent' }}\r\n+  as={Button}  leftIcon={<FiMoreHorizontal /> } >\r\n+  \r\n+  </MenuButton>\r\n+  <MenuList   zIndex={3}>\r\n+    <MenuItem onClick={()=>onEditProduct(product)} color={\"blue.400\"}>Edit <Icon ml={\"3px\"} as={CiEdit}/></MenuItem>\r\n+    <MenuItem onClick={()=>onDeleteProduct(product)} color={\"red\"} >Delete <Icon ml={\"2px\"} as={MdDeleteOutline}/></MenuItem>\r\n+    \r\n+  </MenuList>\r\n+</Menu>\r\n+        </Td>\r\n+        \r\n+      \r\n+      </Tr>\r\n+ \r\n+        )\r\n+    \r\n+      })}\r\n+\r\n+    </Tbody>\r\n+ \r\n+  </Table>\r\n+</TableContainer>\r\n+\r\n+</Flex>\r\n+<Modal isOpen={isOpen} onClose={onClose}>\r\n+        <ModalOverlay />\r\n+        <ModalContent>\r\n+          <ModalHeader>Delete {deleteProduct.name}</ModalHeader>\r\n+          <ModalBody>\r\n+<Flex>  Are you sure  you want to delete <Text ml={\"4px\"} fontWeight={\"700\"}>{deleteProduct.name}</Text>  </Flex>\r\n+         <Text> Products deleted can not be retrieved</Text>\r\n+          </ModalBody>\r\n+\r\n+          <ModalFooter>\r\n+            <Button colorScheme='blue' mr={3} onClick={onClose}>\r\n+              Close\r\n+            </Button>\r\n+            <Button colorScheme='red' onClick={deletingProduct}  bg={\"red.500\"}>Delete</Button>\r\n+          </ModalFooter>\r\n+        </ModalContent>\r\n+      </Modal>\r\n+</Flex>\r\n+    </Flex>\r\n+}\r\n+export default ProjectTable;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1695048238611,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -150,9 +150,9 @@\n     </Thead>\r\n      <Tbody>\r\n      \r\n       {products.filter((item:any)=>{\r\n-        return item.title.toLowerCase() ===\"\"?item :item.name.toLowerCase().includes(name.toLowerCase())\r\n+        return item.title.toLowerCase() ===\"\"?item :item.title.toLowerCase().includes(name.toLowerCase())\r\n       } ).map((product:any,index:any)=>{\r\n         \r\n         \r\n         return(\r\n@@ -222,231 +222,5 @@\n       </Modal>\r\n </Flex>\r\n     </Flex>\r\n }\r\n-export default ProjectTable;\n-import { Flex,Text,Link,Button,Icon,Input,useDisclosure } from '@chakra-ui/react';\r\n-import React,{useState,useEffect} from 'react';\r\n-import {AiOutlinePlus} from \"react-icons/ai\"\r\n-import {\r\n-  Table,\r\n-  Thead,\r\n-  Tbody,\r\n-  Tfoot,\r\n-  Tr,\r\n-  Th,\r\n-  Td,\r\n-  TableCaption,\r\n-  TableContainer,\r\n-} from '@chakra-ui/react'\r\n-import { useRouter } from 'next/router';\r\n-import { auth,db,storage } from '@/firebase/firebase';\r\n-import { collection,deleteDoc, getDocs,doc,serverTimestamp,Timestamp, query, where, orderBy } from \"firebase/firestore\";\r\n-import { useAuthState } from 'react-firebase-hooks/auth';\r\n-import {\r\n-  Modal,\r\n-  ModalOverlay,\r\n-  ModalContent,\r\n-  ModalHeader,\r\n-  ModalFooter,\r\n-  ModalBody,\r\n-  ModalCloseButton,\r\n-} from '@chakra-ui/react'\r\n-      import {\r\n-  Menu,\r\n-  MenuButton,\r\n-  MenuList,\r\n-  MenuItem,\r\n-  MenuItemOption,\r\n-  MenuGroup,\r\n-  MenuOptionGroup,\r\n-  MenuDivider,\r\n-} from '@chakra-ui/react'\r\n-import { ref, deleteObject } from \"firebase/storage\";\r\n-\r\n-import { BsPlus } from \"react-icons/bs\";\r\n-import { MdDeleteOutline } from \"react-icons/md\";\r\n-import { CiEdit } from \"react-icons/ci\";\r\n-import { FiMoreHorizontal } from \"react-icons/fi\";\r\n-import { useRecoilState } from 'recoil';\r\n-import { productState } from '@/atoms/Products';\r\n-\r\n-\r\n-type ProductTableProps = {\r\n-    \r\n-};\r\n-\r\n-const ProjectTable:React.FC<ProductTableProps> = () => {\r\n-  const[user,loading,error]=useAuthState(auth)\r\n-   const[products,setProducts]=useState([])\r\n-    const { isOpen, onOpen, onClose } = useDisclosure()\r\n-    const router =useRouter()\r\n-    const citiesRef = collection(db, \"products\");\r\n-     const[deleteProduct,setDeleteProduct]=useState<any>([])\r\n-     const[name,setName]=useState(\"\")\r\n-    const [editProduct, setEditProduct] = useRecoilState(productState);\r\n-\r\n-const nextPage=()=>{\r\n-    router.push('/admin/newprojects')\r\n-}\r\n-\r\n-const getProducts = async () => {\r\n-    try {\r\n-      const productsQuery = query(\r\n-        collection(db, \"projects\"),\r\n-        where(\"creatorId\", \"==\", user?.email),\r\n-        \r\n-      );\r\n-      const productDocs = await getDocs(productsQuery);\r\n-      const comments = productDocs.docs.map((doc) => ({\r\n-        id: doc.id,\r\n-        ...doc.data(),\r\n-      }));\r\n-     \r\n-      setProducts(comments as any);\r\n-\r\n-    } catch (error: any) {\r\n-      console.log(\"getPostComments error\", error.message);\r\n-    }\r\n-  \r\n-  };\r\n-\r\n-  useEffect(() => {\r\n-  \r\n-\r\n-    getProducts();\r\n-  }, [user]);\r\n-\r\n-\r\n-const onDeleteProduct = async (product:any)=>{\r\n-setDeleteProduct(product)\r\n-onOpen()\r\n-}\r\n-const deletingProduct=async()=>{\r\n-  try{\r\n-  await deleteDoc(doc(db, \"products\", deleteProduct.id));\r\n-  onClose()\r\n-    setProducts((prevImage:any)=>prevImage.filter((item:any)=>item.id != deleteProduct.id))\r\n-\r\n-      \r\n-        deleteProduct.imageURL.map(async (img:any)=>{\r\n-   const imageRef = ref(storage, `products/${img.id}/image`);\r\n-     deleteObject(imageRef).then(() => {\r\n-  // File deleted successfully\r\n-}).catch((error:any) => {\r\n-  // Uh-oh, an error occurred!\r\n-});\r\n-     \r\n-})\r\n-\r\n- \r\n-}catch(err){\r\n-\r\n-}\r\n-}\r\n-\r\n-const onEditProduct=async(product:any)=>{\r\n-setEditProduct(product)\r\n- router.push(`/admin/edit/${product.id}`)\r\n-}\r\n-\r\n-    return <Flex  position='relative' mt={\"20vh\"} justify='center' align='center' >\r\n-<Flex mb={\"10vh\"} flexDirection='column' boxShadow='dark-lg' p='6' rounded='md' width={{base:\"85%\",md:\"50%\"}}>\r\n-\r\n-\r\n-    {/* addproduct button and search bar */}\r\n-<Flex justify={'space-between'} align='center'>\r\n-<Button onClick={nextPage} _hover={{bg:\"blue.400\"}} p={{base:\"5\",lg:\"2\"}} cursor='pointer' color='white' borderRadius={\"10px\"} bg={\" blue.500\"}>\r\n-     <Icon color='white' fontSize={'20px'} as={AiOutlinePlus}/> Add Products\r\n-     </Button>\r\n-     <Input borderRadius={'10px'} width={'60%'} ml={\"20px\"} placeholder='Search Products'/>\r\n-</Flex>\r\n-\r\n-\r\n-{/* product table */}\r\n-<Flex  mt={\"5vh\"}>\r\n-<TableContainer height={\"50vh\"} overflowY={\"scroll\"} width={\"100%\"}  >\r\n-  <Table variant='simple'>\r\n-    <TableCaption>Products from Wurvicat</TableCaption>\r\n-    <Thead>\r\n-      <Tr>\r\n-        <Th>Products</Th>\r\n-        <Th>CreatedAt</Th>\r\n-        <Th isNumeric>Options</Th>\r\n-      </Tr>\r\n-    </Thead>\r\n-     <Tbody>\r\n-     \r\n-      {products.filter((item:any)=>{\r\n-        return item.name.toLowerCase() ===\"\"?item :item.name.toLowerCase().includes(name.toLowerCase())\r\n-      } ).map((product:any,index:any)=>{\r\n-        \r\n-        \r\n-        return(\r\n-\r\n-            <Tr key={index}>\r\n-        <Td>{product.name.charAt(0).toUpperCase() + product.name.slice(1)}</Td>\r\n-        \r\n-            <Td >\r\n-          {new Date(product.createdAt.seconds *1000).toDateString()}\r\n-        </Td>\r\n-            <Td zIndex={1}   isNumeric>\r\n-                 <Menu>\r\n-  <MenuButton \r\n-   px={4}\r\n-   fontSize={\"20px\"}\r\n-    py={2}\r\n-    bg={\"transparent\"}\r\n-    transition='all 0.2s'\r\n-    borderRadius='md'\r\n-    border=\"none\"\r\n-    color=\"black\"\r\n-    borderWidth='1px'\r\n-    _hover={{ bg: 'transparent' }}\r\n-    _expanded={{ bg: 'transparent' }}\r\n-   \r\n-    _focus={{  bg: 'transparent' }}\r\n-  as={Button}  leftIcon={<FiMoreHorizontal /> } >\r\n-  \r\n-  </MenuButton>\r\n-  <MenuList   zIndex={3}>\r\n-    <MenuItem onClick={()=>onEditProduct(product)} color={\"blue.400\"}>Edit <Icon ml={\"3px\"} as={CiEdit}/></MenuItem>\r\n-    <MenuItem onClick={()=>onDeleteProduct(product)} color={\"red\"} >Delete <Icon ml={\"2px\"} as={MdDeleteOutline}/></MenuItem>\r\n-    \r\n-  </MenuList>\r\n-</Menu>\r\n-        </Td>\r\n-        \r\n-      \r\n-      </Tr>\r\n- \r\n-        )\r\n-    \r\n-      })}\r\n-\r\n-    </Tbody>\r\n- \r\n-  </Table>\r\n-</TableContainer>\r\n-\r\n-</Flex>\r\n-<Modal isOpen={isOpen} onClose={onClose}>\r\n-        <ModalOverlay />\r\n-        <ModalContent>\r\n-          <ModalHeader>Delete {deleteProduct.name}</ModalHeader>\r\n-          <ModalBody>\r\n-<Flex>  Are you sure  you want to delete <Text ml={\"4px\"} fontWeight={\"700\"}>{deleteProduct.name}</Text>  </Flex>\r\n-         <Text> Products deleted can not be retrieved</Text>\r\n-          </ModalBody>\r\n-\r\n-          <ModalFooter>\r\n-            <Button colorScheme='blue' mr={3} onClick={onClose}>\r\n-              Close\r\n-            </Button>\r\n-            <Button colorScheme='red' onClick={deletingProduct}  bg={\"red.500\"}>Delete</Button>\r\n-          </ModalFooter>\r\n-        </ModalContent>\r\n-      </Modal>\r\n-</Flex>\r\n-    </Flex>\r\n-}\r\n export default ProjectTable;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1695048276467,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -157,9 +157,9 @@\n         \r\n         return(\r\n \r\n             <Tr key={index}>\r\n-        <Td>{product.name.charAt(0).toUpperCase() + product.name.slice(1)}</Td>\r\n+        <Td>{product.title.charAt(0).toUpperCase() + product.name.slice(1)}</Td>\r\n         \r\n             <Td >\r\n           {new Date(product.createdAt.seconds *1000).toDateString()}\r\n         </Td>\r\n"
                },
                {
                    "date": 1695048292951,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -157,9 +157,9 @@\n         \r\n         return(\r\n \r\n             <Tr key={index}>\r\n-        <Td>{product.title.charAt(0).toUpperCase() + product.name.slice(1)}</Td>\r\n+        <Td>{product.title.charAt(0).toUpperCase() + product.title.slice(1)}</Td>\r\n         \r\n             <Td >\r\n           {new Date(product.createdAt.seconds *1000).toDateString()}\r\n         </Td>\r\n"
                },
                {
                    "date": 1695048313021,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -205,9 +205,9 @@\n </Flex>\r\n <Modal isOpen={isOpen} onClose={onClose}>\r\n         <ModalOverlay />\r\n         <ModalContent>\r\n-          <ModalHeader>Delete {deleteProduct.name}</ModalHeader>\r\n+          <ModalHeader>Delete {deleteProduct.title}</ModalHeader>\r\n           <ModalBody>\r\n <Flex>  Are you sure  you want to delete <Text ml={\"4px\"} fontWeight={\"700\"}>{deleteProduct.name}</Text>  </Flex>\r\n          <Text> Products deleted can not be retrieved</Text>\r\n           </ModalBody>\r\n"
                },
                {
                    "date": 1695048331895,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -207,9 +207,9 @@\n         <ModalOverlay />\r\n         <ModalContent>\r\n           <ModalHeader>Delete {deleteProduct.title}</ModalHeader>\r\n           <ModalBody>\r\n-<Flex>  Are you sure  you want to delete <Text ml={\"4px\"} fontWeight={\"700\"}>{deleteProduct.name}</Text>  </Flex>\r\n+<Flex>  Are you sure  you want to delete <Text ml={\"4px\"} fontWeight={\"700\"}>{deleteProduct.title}</Text>  </Flex>\r\n          <Text> Products deleted can not be retrieved</Text>\r\n           </ModalBody>\r\n \r\n           <ModalFooter>\r\n"
                },
                {
                    "date": 1695048453970,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,9 +50,9 @@\n };\r\n \r\n const ProjectTable:React.FC<ProductTableProps> = () => {\r\n   const[user,loading,error]=useAuthState(auth)\r\n-   const[products,setProducts]=useState([])\r\n+   const[projects,setProducts]=useState([])\r\n     const { isOpen, onOpen, onClose } = useDisclosure()\r\n     const router =useRouter()\r\n     const citiesRef = collection(db, \"products\");\r\n      const[deleteProduct,setDeleteProduct]=useState<any>([])\r\n"
                },
                {
                    "date": 1695048488952,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,9 +50,9 @@\n };\r\n \r\n const ProjectTable:React.FC<ProductTableProps> = () => {\r\n   const[user,loading,error]=useAuthState(auth)\r\n-   const[projects,setProducts]=useState([])\r\n+   const[projects,setProjects]=useState([])\r\n     const { isOpen, onOpen, onClose } = useDisclosure()\r\n     const router =useRouter()\r\n     const citiesRef = collection(db, \"products\");\r\n      const[deleteProduct,setDeleteProduct]=useState<any>([])\r\n@@ -75,9 +75,9 @@\n         id: doc.id,\r\n         ...doc.data(),\r\n       }));\r\n      \r\n-      setProducts(comments as any);\r\n+      setProjects(comments as any);\r\n \r\n     } catch (error: any) {\r\n       console.log(\"getPostComments error\", error.message);\r\n     }\r\n"
                },
                {
                    "date": 1695048491095,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -90,10 +90,10 @@\n     getProducts();\r\n   }, [user]);\r\n \r\n \r\n-const onDeleteProduct = async (product:any)=>{\r\n-setDeleteProduct(product)\r\n+const onDeleteProduct = async (project:any)=>{\r\n+setDeleteProduct(pro)\r\n onOpen()\r\n }\r\n const deletingProduct=async()=>{\r\n   try{\r\n"
                },
                {
                    "date": 1695048535602,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -98,9 +98,9 @@\n const deletingProject=async()=>{\r\n   try{\r\n   await deleteDoc(doc(db, \"products\", deleteProduct.id));\r\n   onClose()\r\n-    setProducts((prevImage:any)=>prevImage.filter((item:any)=>item.id != deleteProduct.id))\r\n+    setProjects((prevImage:any)=>prevImage.filter((item:any)=>item.id != deleteProduct.id))\r\n \r\n       \r\n         deleteProduct.imageURL.map(async (img:any)=>{\r\n    const imageRef = ref(storage, `products/${img.id}/image`);\r\n"
                },
                {
                    "date": 1695048558086,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -117,9 +117,9 @@\n \r\n }\r\n }\r\n \r\n-const onEditProduct=async(product:any)=>{\r\n+const onEditProject=async(product:any)=>{\r\n setEditProduct(product)\r\n  router.push(`/admin/edit/${product.id}`)\r\n }\r\n \r\n"
                }
            ],
            "date": 1695047938330,
            "name": "Commit-0",
            "content": "rafce"
        }
    ]
}